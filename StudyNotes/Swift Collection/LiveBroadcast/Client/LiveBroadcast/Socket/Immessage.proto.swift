/// Generated by the Protocol Buffers 3.6.1 compiler.  DO NOT EDIT!
/// Protobuf-swift version: 4.0.0
/// Source file "IMMessage.proto"
/// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public struct ImmessageRoot {
    public static let `default` = ImmessageRoot()
    public var extensionRegistry:ExtensionRegistry

    init() {
        extensionRegistry = ExtensionRegistry()
        registerAllExtensions(registry: extensionRegistry)
    }
    public func registerAllExtensions(registry: ExtensionRegistry) {
    }
}

final public class UserInfo : GeneratedMessage {
    public typealias BuilderType = UserInfo.Builder

    public static func == (lhs: UserInfo, rhs: UserInfo) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
        fieldCheck = fieldCheck && (lhs.hasLevel == rhs.hasLevel) && (!lhs.hasLevel || lhs.level == rhs.level)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var name:String! = nil
    public fileprivate(set) var hasName:Bool = false

    public fileprivate(set) var level:Int64! = nil
    public fileprivate(set) var hasLevel:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasName {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(UserInfo.self): field \"name\" mark required")
        }
        if !hasLevel {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(UserInfo.self): field \"level\" mark required")
        }
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasName {
            try codedOutputStream.writeString(fieldNumber: 1, value:name)
        }
        if hasLevel {
            try codedOutputStream.writeInt64(fieldNumber: 2, value:level)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasName {
            serialize_size += name.computeStringSize(fieldNumber: 1)
        }
        if hasLevel {
            serialize_size += level.computeInt64Size(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> UserInfo.Builder {
        return UserInfo.classBuilder() as! UserInfo.Builder
    }
    public func getBuilder() -> UserInfo.Builder {
        return classBuilder() as! UserInfo.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserInfo.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return UserInfo.Builder()
    }
    public func toBuilder() throws -> UserInfo.Builder {
        return try UserInfo.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:UserInfo) throws -> UserInfo.Builder {
        return try UserInfo.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasName {
            jsonMap["name"] = name
        }
        if hasLevel {
            jsonMap["level"] = "\(level!)"
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> UserInfo {
        return try UserInfo.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> UserInfo {
        return try UserInfo.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasName {
            output += "\(indent) name: \(String(describing: name)) \n"
        }
        if hasLevel {
            output += "\(indent) level: \(String(describing: level)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasName {
                hashCode = (hashCode &* 31) &+ name.hashValue
            }
            if hasLevel {
                hashCode = (hashCode &* 31) &+ level.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "UserInfo"
    }
    override public func className() -> String {
        return "UserInfo"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:UserInfo = UserInfo()
        public func getMessage() -> UserInfo {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var name:String {
            get {
                return builderResult.name
            }
            set (value) {
                builderResult.hasName = true
                builderResult.name = value
            }
        }
        public var hasName:Bool {
            get {
                return builderResult.hasName
            }
        }
        @discardableResult
        public func setName(_ value:String) -> UserInfo.Builder {
            self.name = value
            return self
        }
        @discardableResult
        public func clearName() -> UserInfo.Builder{
            builderResult.hasName = false
            builderResult.name = nil
            return self
        }
        public var level:Int64 {
            get {
                return builderResult.level
            }
            set (value) {
                builderResult.hasLevel = true
                builderResult.level = value
            }
        }
        public var hasLevel:Bool {
            get {
                return builderResult.hasLevel
            }
        }
        @discardableResult
        public func setLevel(_ value:Int64) -> UserInfo.Builder {
            self.level = value
            return self
        }
        @discardableResult
        public func clearLevel() -> UserInfo.Builder{
            builderResult.hasLevel = false
            builderResult.level = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> UserInfo.Builder {
            builderResult = UserInfo()
            return self
        }
        override public func clone() throws -> UserInfo.Builder {
            return try UserInfo.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> UserInfo {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> UserInfo {
            let returnMe:UserInfo = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:UserInfo) throws -> UserInfo.Builder {
            if other == UserInfo() {
                return self
            }
            if other.hasName {
                name = other.name
            }
            if other.hasLevel {
                level = other.level
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> UserInfo.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    name = try codedInputStream.readString()

                case 16:
                    level = try codedInputStream.readInt64()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> UserInfo.Builder {
            let resultDecodedBuilder = UserInfo.Builder()
            if let jsonValueName = jsonMap["name"] as? String {
                resultDecodedBuilder.name = jsonValueName
            }
            if let jsonValueLevel = jsonMap["level"] as? String {
                resultDecodedBuilder.level = Int64(jsonValueLevel)!
            } else if let jsonValueLevel = jsonMap["level"] as? Int {
                resultDecodedBuilder.level = Int64(jsonValueLevel)
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> UserInfo.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try UserInfo.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class TextMessage : GeneratedMessage {
    public typealias BuilderType = TextMessage.Builder

    public static func == (lhs: TextMessage, rhs: TextMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
        fieldCheck = fieldCheck && (lhs.hasText == rhs.hasText) && (!lhs.hasText || lhs.text == rhs.text)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var user:UserInfo!
    public fileprivate(set) var hasUser:Bool = false
    public fileprivate(set) var text:String! = nil
    public fileprivate(set) var hasText:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasUser {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(TextMessage.self): field \"user\" mark required")
        }
        if !hasText {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(TextMessage.self): field \"text\" mark required")
        }
        try user.isInitialized()
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUser {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:user)
        }
        if hasText {
            try codedOutputStream.writeString(fieldNumber: 2, value:text)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUser {
            if let varSizeuser = user?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeuser
            }
        }
        if hasText {
            serialize_size += text.computeStringSize(fieldNumber: 2)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> TextMessage.Builder {
        return TextMessage.classBuilder() as! TextMessage.Builder
    }
    public func getBuilder() -> TextMessage.Builder {
        return classBuilder() as! TextMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return TextMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return TextMessage.Builder()
    }
    public func toBuilder() throws -> TextMessage.Builder {
        return try TextMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:TextMessage) throws -> TextMessage.Builder {
        return try TextMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUser {
            jsonMap["user"] = try user.encode()
        }
        if hasText {
            jsonMap["text"] = text
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> TextMessage {
        return try TextMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> TextMessage {
        return try TextMessage.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUser {
            output += "\(indent) user {\n"
            if let outDescUser = user {
                output += try outDescUser.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasText {
            output += "\(indent) text: \(String(describing: text)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            if hasText {
                hashCode = (hashCode &* 31) &+ text.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "TextMessage"
    }
    override public func className() -> String {
        return "TextMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:TextMessage = TextMessage()
        public func getMessage() -> TextMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var user:UserInfo! {
            get {
                if userBuilder_ != nil {
                    builderResult.user = userBuilder_.getMessage()
                }
                return builderResult.user
            }
            set (value) {
                builderResult.hasUser = value != nil
                builderResult.user = value
            }
        }
        public var hasUser:Bool {
            get {
                return builderResult.hasUser
            }
        }
        fileprivate var userBuilder_:UserInfo.Builder! {
            didSet {
                builderResult.hasUser = true
            }
        }
        public func getUserBuilder() -> UserInfo.Builder {
            if userBuilder_ == nil {
                userBuilder_ = UserInfo.Builder()
                builderResult.user = userBuilder_.getMessage()
                if user != nil {
                    try! userBuilder_.mergeFrom(other: user)
                }
            }
            return userBuilder_
        }
        @discardableResult
        public func setUser(_ value:UserInfo!) -> TextMessage.Builder {
            self.user = value
            return self
        }
        @discardableResult
        public func mergeUser(value:UserInfo) throws -> TextMessage.Builder {
            if builderResult.hasUser {
                builderResult.user = try UserInfo.builderWithPrototype(prototype:builderResult.user).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.user = value
            }
            builderResult.hasUser = true
            return self
        }
        @discardableResult
        public func clearUser() -> TextMessage.Builder {
            userBuilder_ = nil
            builderResult.hasUser = false
            builderResult.user = nil
            return self
        }
        public var text:String {
            get {
                return builderResult.text
            }
            set (value) {
                builderResult.hasText = true
                builderResult.text = value
            }
        }
        public var hasText:Bool {
            get {
                return builderResult.hasText
            }
        }
        @discardableResult
        public func setText(_ value:String) -> TextMessage.Builder {
            self.text = value
            return self
        }
        @discardableResult
        public func clearText() -> TextMessage.Builder{
            builderResult.hasText = false
            builderResult.text = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> TextMessage.Builder {
            builderResult = TextMessage()
            return self
        }
        override public func clone() throws -> TextMessage.Builder {
            return try TextMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> TextMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> TextMessage {
            let returnMe:TextMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:TextMessage) throws -> TextMessage.Builder {
            if other == TextMessage() {
                return self
            }
            if (other.hasUser) {
                try mergeUser(value: other.user)
            }
            if other.hasText {
                text = other.text
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> TextMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> TextMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:UserInfo.Builder = UserInfo.Builder()
                    if hasUser {
                        try subBuilder.mergeFrom(other: user)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    user = subBuilder.buildPartial()

                case 18:
                    text = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> TextMessage.Builder {
            let resultDecodedBuilder = TextMessage.Builder()
            if let jsonValueUser = jsonMap["user"] as? Dictionary<String,Any> {
                resultDecodedBuilder.user = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUser).build()

            }
            if let jsonValueText = jsonMap["text"] as? String {
                resultDecodedBuilder.text = jsonValueText
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> TextMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try TextMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

final public class GiftMessage : GeneratedMessage {
    public typealias BuilderType = GiftMessage.Builder

    public static func == (lhs: GiftMessage, rhs: GiftMessage) -> Bool {
        if lhs === rhs {
            return true
        }
        var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
        fieldCheck = fieldCheck && (lhs.hasUser == rhs.hasUser) && (!lhs.hasUser || lhs.user == rhs.user)
        fieldCheck = fieldCheck && (lhs.hasGiftname == rhs.hasGiftname) && (!lhs.hasGiftname || lhs.giftname == rhs.giftname)
        fieldCheck = fieldCheck && (lhs.hasGitUrl == rhs.hasGitUrl) && (!lhs.hasGitUrl || lhs.gitUrl == rhs.gitUrl)
        fieldCheck = fieldCheck && (lhs.hasGiftCount == rhs.hasGiftCount) && (!lhs.hasGiftCount || lhs.giftCount == rhs.giftCount)
        fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
        return fieldCheck
    }

    public fileprivate(set) var user:UserInfo!
    public fileprivate(set) var hasUser:Bool = false
    public fileprivate(set) var giftname:String! = nil
    public fileprivate(set) var hasGiftname:Bool = false

    public fileprivate(set) var gitUrl:String! = nil
    public fileprivate(set) var hasGitUrl:Bool = false

    public fileprivate(set) var giftCount:String! = nil
    public fileprivate(set) var hasGiftCount:Bool = false

    required public init() {
        super.init()
    }
    override public func isInitialized() throws {
        if !hasUser {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(GiftMessage.self): field \"user\" mark required")
        }
        if !hasGiftname {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(GiftMessage.self): field \"giftname\" mark required")
        }
        if !hasGitUrl {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(GiftMessage.self): field \"gitUrl\" mark required")
        }
        if !hasGiftCount {
            throw ProtocolBuffersError.invalidProtocolBuffer("Uninitialized Message \(GiftMessage.self): field \"giftCount\" mark required")
        }
        try user.isInitialized()
    }
    override public func writeTo(codedOutputStream: CodedOutputStream) throws {
        if hasUser {
            try codedOutputStream.writeMessage(fieldNumber: 1, value:user)
        }
        if hasGiftname {
            try codedOutputStream.writeString(fieldNumber: 2, value:giftname)
        }
        if hasGitUrl {
            try codedOutputStream.writeString(fieldNumber: 3, value:gitUrl)
        }
        if hasGiftCount {
            try codedOutputStream.writeString(fieldNumber: 4, value:giftCount)
        }
        try unknownFields.writeTo(codedOutputStream: codedOutputStream)
    }
    override public func serializedSize() -> Int32 {
        var serialize_size:Int32 = memoizedSerializedSize
        if serialize_size != -1 {
         return serialize_size
        }

        serialize_size = 0
        if hasUser {
            if let varSizeuser = user?.computeMessageSize(fieldNumber: 1) {
                serialize_size += varSizeuser
            }
        }
        if hasGiftname {
            serialize_size += giftname.computeStringSize(fieldNumber: 2)
        }
        if hasGitUrl {
            serialize_size += gitUrl.computeStringSize(fieldNumber: 3)
        }
        if hasGiftCount {
            serialize_size += giftCount.computeStringSize(fieldNumber: 4)
        }
        serialize_size += unknownFields.serializedSize()
        memoizedSerializedSize = serialize_size
        return serialize_size
    }
    public class func getBuilder() -> GiftMessage.Builder {
        return GiftMessage.classBuilder() as! GiftMessage.Builder
    }
    public func getBuilder() -> GiftMessage.Builder {
        return classBuilder() as! GiftMessage.Builder
    }
    override public class func classBuilder() -> ProtocolBuffersMessageBuilder {
        return GiftMessage.Builder()
    }
    override public func classBuilder() -> ProtocolBuffersMessageBuilder {
        return GiftMessage.Builder()
    }
    public func toBuilder() throws -> GiftMessage.Builder {
        return try GiftMessage.builderWithPrototype(prototype:self)
    }
    public class func builderWithPrototype(prototype:GiftMessage) throws -> GiftMessage.Builder {
        return try GiftMessage.Builder().mergeFrom(other:prototype)
    }
    override public func encode() throws -> Dictionary<String,Any> {
        try isInitialized()
        var jsonMap:Dictionary<String,Any> = Dictionary<String,Any>()
        if hasUser {
            jsonMap["user"] = try user.encode()
        }
        if hasGiftname {
            jsonMap["giftname"] = giftname
        }
        if hasGitUrl {
            jsonMap["gitURL"] = gitUrl
        }
        if hasGiftCount {
            jsonMap["giftCount"] = giftCount
        }
        return jsonMap
    }
    override class public func decode(jsonMap:Dictionary<String,Any>) throws -> GiftMessage {
        return try GiftMessage.Builder.decodeToBuilder(jsonMap:jsonMap).build()
    }
    override class public func fromJSON(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> GiftMessage {
        return try GiftMessage.Builder.fromJSONToBuilder(data:data, options:options).build()
    }
    override public func getDescription(indent:String) throws -> String {
        var output = ""
        if hasUser {
            output += "\(indent) user {\n"
            if let outDescUser = user {
                output += try outDescUser.getDescription(indent: "\(indent)  ")
            }
            output += "\(indent) }\n"
        }
        if hasGiftname {
            output += "\(indent) giftname: \(String(describing: giftname)) \n"
        }
        if hasGitUrl {
            output += "\(indent) gitUrl: \(String(describing: gitUrl)) \n"
        }
        if hasGiftCount {
            output += "\(indent) giftCount: \(String(describing: giftCount)) \n"
        }
        output += unknownFields.getDescription(indent: indent)
        return output
    }
    override public var hashValue:Int {
        get {
            var hashCode:Int = 7
            if hasUser {
                if let hashValueuser = user?.hashValue {
                    hashCode = (hashCode &* 31) &+ hashValueuser
                }
            }
            if hasGiftname {
                hashCode = (hashCode &* 31) &+ giftname.hashValue
            }
            if hasGitUrl {
                hashCode = (hashCode &* 31) &+ gitUrl.hashValue
            }
            if hasGiftCount {
                hashCode = (hashCode &* 31) &+ giftCount.hashValue
            }
            hashCode = (hashCode &* 31) &+  unknownFields.hashValue
            return hashCode
        }
    }


    //Meta information declaration start

    override public class func className() -> String {
        return "GiftMessage"
    }
    override public func className() -> String {
        return "GiftMessage"
    }
    //Meta information declaration end

    final public class Builder : GeneratedMessageBuilder {
        fileprivate var builderResult:GiftMessage = GiftMessage()
        public func getMessage() -> GiftMessage {
            return builderResult
        }

        required override public init () {
            super.init()
        }
        public var user:UserInfo! {
            get {
                if userBuilder_ != nil {
                    builderResult.user = userBuilder_.getMessage()
                }
                return builderResult.user
            }
            set (value) {
                builderResult.hasUser = value != nil
                builderResult.user = value
            }
        }
        public var hasUser:Bool {
            get {
                return builderResult.hasUser
            }
        }
        fileprivate var userBuilder_:UserInfo.Builder! {
            didSet {
                builderResult.hasUser = true
            }
        }
        public func getUserBuilder() -> UserInfo.Builder {
            if userBuilder_ == nil {
                userBuilder_ = UserInfo.Builder()
                builderResult.user = userBuilder_.getMessage()
                if user != nil {
                    try! userBuilder_.mergeFrom(other: user)
                }
            }
            return userBuilder_
        }
        @discardableResult
        public func setUser(_ value:UserInfo!) -> GiftMessage.Builder {
            self.user = value
            return self
        }
        @discardableResult
        public func mergeUser(value:UserInfo) throws -> GiftMessage.Builder {
            if builderResult.hasUser {
                builderResult.user = try UserInfo.builderWithPrototype(prototype:builderResult.user).mergeFrom(other: value).buildPartial()
            } else {
                builderResult.user = value
            }
            builderResult.hasUser = true
            return self
        }
        @discardableResult
        public func clearUser() -> GiftMessage.Builder {
            userBuilder_ = nil
            builderResult.hasUser = false
            builderResult.user = nil
            return self
        }
        public var giftname:String {
            get {
                return builderResult.giftname
            }
            set (value) {
                builderResult.hasGiftname = true
                builderResult.giftname = value
            }
        }
        public var hasGiftname:Bool {
            get {
                return builderResult.hasGiftname
            }
        }
        @discardableResult
        public func setGiftname(_ value:String) -> GiftMessage.Builder {
            self.giftname = value
            return self
        }
        @discardableResult
        public func clearGiftname() -> GiftMessage.Builder{
            builderResult.hasGiftname = false
            builderResult.giftname = nil
            return self
        }
        public var gitUrl:String {
            get {
                return builderResult.gitUrl
            }
            set (value) {
                builderResult.hasGitUrl = true
                builderResult.gitUrl = value
            }
        }
        public var hasGitUrl:Bool {
            get {
                return builderResult.hasGitUrl
            }
        }
        @discardableResult
        public func setGitUrl(_ value:String) -> GiftMessage.Builder {
            self.gitUrl = value
            return self
        }
        @discardableResult
        public func clearGitUrl() -> GiftMessage.Builder{
            builderResult.hasGitUrl = false
            builderResult.gitUrl = nil
            return self
        }
        public var giftCount:String {
            get {
                return builderResult.giftCount
            }
            set (value) {
                builderResult.hasGiftCount = true
                builderResult.giftCount = value
            }
        }
        public var hasGiftCount:Bool {
            get {
                return builderResult.hasGiftCount
            }
        }
        @discardableResult
        public func setGiftCount(_ value:String) -> GiftMessage.Builder {
            self.giftCount = value
            return self
        }
        @discardableResult
        public func clearGiftCount() -> GiftMessage.Builder{
            builderResult.hasGiftCount = false
            builderResult.giftCount = nil
            return self
        }
        override public var internalGetResult:GeneratedMessage {
            get {
                return builderResult
            }
        }
        @discardableResult
        override public func clear() -> GiftMessage.Builder {
            builderResult = GiftMessage()
            return self
        }
        override public func clone() throws -> GiftMessage.Builder {
            return try GiftMessage.builderWithPrototype(prototype:builderResult)
        }
        override public func build() throws -> GiftMessage {
            try checkInitialized()
            return buildPartial()
        }
        public func buildPartial() -> GiftMessage {
            let returnMe:GiftMessage = builderResult
            return returnMe
        }
        @discardableResult
        public func mergeFrom(other:GiftMessage) throws -> GiftMessage.Builder {
            if other == GiftMessage() {
                return self
            }
            if (other.hasUser) {
                try mergeUser(value: other.user)
            }
            if other.hasGiftname {
                giftname = other.giftname
            }
            if other.hasGitUrl {
                gitUrl = other.gitUrl
            }
            if other.hasGiftCount {
                giftCount = other.giftCount
            }
            try merge(unknownField: other.unknownFields)
            return self
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream) throws -> GiftMessage.Builder {
            return try mergeFrom(codedInputStream: codedInputStream, extensionRegistry:ExtensionRegistry())
        }
        @discardableResult
        override public func mergeFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage.Builder {
            let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(copyFrom:self.unknownFields)
            while (true) {
                let protobufTag = try codedInputStream.readTag()
                switch protobufTag {
                case 0: 
                    self.unknownFields = try unknownFieldsBuilder.build()
                    return self

                case 10:
                    let subBuilder:UserInfo.Builder = UserInfo.Builder()
                    if hasUser {
                        try subBuilder.mergeFrom(other: user)
                    }
                    try codedInputStream.readMessage(builder: subBuilder, extensionRegistry:extensionRegistry)
                    user = subBuilder.buildPartial()

                case 18:
                    giftname = try codedInputStream.readString()

                case 26:
                    gitUrl = try codedInputStream.readString()

                case 34:
                    giftCount = try codedInputStream.readString()

                default:
                    if (!(try parse(codedInputStream:codedInputStream, unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
                        unknownFields = try unknownFieldsBuilder.build()
                        return self
                    }
                }
            }
        }
        class override public func decodeToBuilder(jsonMap:Dictionary<String,Any>) throws -> GiftMessage.Builder {
            let resultDecodedBuilder = GiftMessage.Builder()
            if let jsonValueUser = jsonMap["user"] as? Dictionary<String,Any> {
                resultDecodedBuilder.user = try UserInfo.Builder.decodeToBuilder(jsonMap:jsonValueUser).build()

            }
            if let jsonValueGiftname = jsonMap["giftname"] as? String {
                resultDecodedBuilder.giftname = jsonValueGiftname
            }
            if let jsonValueGitUrl = jsonMap["gitURL"] as? String {
                resultDecodedBuilder.gitUrl = jsonValueGitUrl
            }
            if let jsonValueGiftCount = jsonMap["giftCount"] as? String {
                resultDecodedBuilder.giftCount = jsonValueGiftCount
            }
            return resultDecodedBuilder
        }
        override class public func fromJSONToBuilder(data:Data, options: JSONSerialization.ReadingOptions = []) throws -> GiftMessage.Builder {
            let jsonData = try JSONSerialization.jsonObject(with:data, options: options)
            guard let jsDataCast = jsonData as? Dictionary<String,Any> else {
              throw ProtocolBuffersError.invalidProtocolBuffer("Invalid JSON data")
            }
            return try GiftMessage.Builder.decodeToBuilder(jsonMap:jsDataCast)
        }
    }

}

extension UserInfo: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<UserInfo> {
        var mergedArray = Array<UserInfo>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> UserInfo? {
        return try UserInfo.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> UserInfo {
        return try UserInfo.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "name": return self.name
        case "level": return self.level
        default: return nil
        }
    }
}
extension UserInfo.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = UserInfo
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "name": return self.name
            case "level": return self.level
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "name":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.name = newSubscriptValue
            case "level":
                guard let newSubscriptValue = newSubscriptValue as? Int64 else {
                    return
                }
                self.level = newSubscriptValue
            default: return
            }
        }
    }
}
extension TextMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<TextMessage> {
        var mergedArray = Array<TextMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> TextMessage? {
        return try TextMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> TextMessage {
        return try TextMessage.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> TextMessage {
        return try TextMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> TextMessage {
        return try TextMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> TextMessage {
        return try TextMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> TextMessage {
        return try TextMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> TextMessage {
        return try TextMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "user": return self.user
        case "text": return self.text
        default: return nil
        }
    }
}
extension TextMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = TextMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "user": return self.user
            case "text": return self.text
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "user":
                guard let newSubscriptValue = newSubscriptValue as? UserInfo else {
                    return
                }
                self.user = newSubscriptValue
            case "text":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.text = newSubscriptValue
            default: return
            }
        }
    }
}
extension GiftMessage: GeneratedMessageProtocol {
    public class func parseArrayDelimitedFrom(inputStream: InputStream) throws -> Array<GiftMessage> {
        var mergedArray = Array<GiftMessage>()
        while let value = try parseDelimitedFrom(inputStream: inputStream) {
          mergedArray.append(value)
        }
        return mergedArray
    }
    public class func parseDelimitedFrom(inputStream: InputStream) throws -> GiftMessage? {
        return try GiftMessage.Builder().mergeDelimitedFrom(inputStream: inputStream)?.build()
    }
    public class func parseFrom(data: Data) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(data: data, extensionRegistry:ImmessageRoot.default.extensionRegistry).build()
    }
    public class func parseFrom(data: Data, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(data: data, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(inputStream: InputStream) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(inputStream: inputStream).build()
    }
    public class func parseFrom(inputStream: InputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(inputStream: inputStream, extensionRegistry:extensionRegistry).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(codedInputStream: codedInputStream).build()
    }
    public class func parseFrom(codedInputStream: CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> GiftMessage {
        return try GiftMessage.Builder().mergeFrom(codedInputStream: codedInputStream, extensionRegistry:extensionRegistry).build()
    }
    public subscript(key: String) -> Any? {
        switch key {
        case "user": return self.user
        case "giftname": return self.giftname
        case "gitUrl": return self.gitUrl
        case "giftCount": return self.giftCount
        default: return nil
        }
    }
}
extension GiftMessage.Builder: GeneratedMessageBuilderProtocol {
    public typealias GeneratedMessageType = GiftMessage
    public subscript(key: String) -> Any? {
        get { 
            switch key {
            case "user": return self.user
            case "giftname": return self.giftname
            case "gitUrl": return self.gitUrl
            case "giftCount": return self.giftCount
            default: return nil
            }
        }
        set (newSubscriptValue) { 
            switch key {
            case "user":
                guard let newSubscriptValue = newSubscriptValue as? UserInfo else {
                    return
                }
                self.user = newSubscriptValue
            case "giftname":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.giftname = newSubscriptValue
            case "gitUrl":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.gitUrl = newSubscriptValue
            case "giftCount":
                guard let newSubscriptValue = newSubscriptValue as? String else {
                    return
                }
                self.giftCount = newSubscriptValue
            default: return
            }
        }
    }
}

// @@protoc_insertion_point(global_scope)
